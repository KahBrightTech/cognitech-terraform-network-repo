schemaVersion: '2.2'
description: "Document to install and configure Ansible Tower on Linux servers using AWS Systems Manager (SSM)."
parameters:
  AnsibleS3BucketName:
    type: String
    description: "S3 Bucket Name for Ansible Tower installer"
    default: "ansibleautomationbucket"
  AnsibleS3BucketPrefix:
    type: String
    description: "S3 Bucket Prefix for Ansible Tower installer"
    default: "Ansible_Tower"
  AnsibleTowerArchiveName:
    type: String
    description: "Ansible Tower archive filename"
    default: "ansible-automation-platform-setup-bundle-2.4-1-x86_64.tar.gz"

mainSteps:
  - action: aws:runShellScript
    name: InstallAndConfigureAnsibleTower
    description: Installs and configures Ansible Tower on Linux servers
    inputs:
      timeoutSeconds: 7200
      runCommand:
        - |
          #!/bin/bash -xe
          
          # Resolve SSM parameters directly (proper method)
          ANSIBLE_TOWER_USERNAME="{{ ssm:/Standard/ansible/username }}"
          ANSIBLE_TOWER_PASSWORD="{{ ssm-secure:/Standard/ansible/password }}"
          ANSIBLE_S3_BUCKET_NAME="{{ AnsibleS3BucketName }}"
          ANSIBLE_S3_BUCKET_PREFIX="{{ AnsibleS3BucketPrefix }}"
          ANSIBLE_TOWER_ARCHIVE_NAME="{{ AnsibleTowerArchiveName }}"
          
          log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }

          error_exit() {
              log "ERROR: $1"
              exit 1
          }

          log "Starting Ansible Tower installation..."
          log "Configuration:"
          log "  Username: $ANSIBLE_TOWER_USERNAME"
          log "  S3 Bucket: $ANSIBLE_S3_BUCKET_NAME"
          log "  S3 Prefix: $ANSIBLE_S3_BUCKET_PREFIX"
          log "  Archive Name: $ANSIBLE_TOWER_ARCHIVE_NAME"

          # Validate SSM parameters were resolved
          if [[ "$ANSIBLE_TOWER_USERNAME" == *"ssm:"* ]] || [[ "$ANSIBLE_TOWER_PASSWORD" == *"ssm:"* ]]; then
              error_exit "SSM parameters were not resolved properly. Check if the parameters exist in Parameter Store."
          fi

          # Rest of your script...
          # (Continue with the installation logic)
    precondition:
      StringEquals:
        - platformType
        - Linux
