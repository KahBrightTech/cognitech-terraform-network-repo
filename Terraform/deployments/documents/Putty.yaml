schemaVersion: '2.2'
description: "Install or uninstall PuTTY and related tools on Windows servers using AWS SSM, with Start Menu shortcuts."
parameters:
    Operation:
        type: String
        description: "Operation to perform: install or uninstall"
        default: "install"
        allowedValues:
          - "install"
          - "uninstall"
    InstallPutty:
        type: String
        description: "Install PuTTY (true/false)"
        default: "true"
        allowedValues:
          - "true"
          - "false"
    InstallPuttygen:
        type: String
        description: "Install PuTTYgen (true/false)"
        default: "true"
        allowedValues:
          - "true"
          - "false"
    InstallPscp:
        type: String
        description: "Install PSCP (true/false)"
        default: "true"
        allowedValues:
          - "true"
          - "false"
    InstallPsftp:
        type: String
        description: "Install PSFTP (true/false)"
        default: "true"
        allowedValues:
          - "true"
          - "false"
    RemoveUserData:
        type: String
        description: "Remove user configuration data during uninstall (true/false)"
        default: "false"
        allowedValues:
          - "true"
          - "false"
    InstallLocation:
        type: String
        description: "Directory for PuTTY installation"
        default: "C:\\Program Files\\PuTTY"
mainSteps:
  - action: aws:runPowerShellScript
    name: ManagePuTTY
    description: "Install/uninstall PuTTY and create Start Menu shortcuts"
    inputs:
        timeoutSeconds: 600
        runCommand:
          - |
            function Write-Log {
                param([string]$Message)
                $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                Write-Output "[$timestamp] $Message"
            }

            function Exit-WithError {
                param([string]$ErrorMessage)
                Write-Log "ERROR: $ErrorMessage"
                exit 1
            }

            Write-Log "Starting PuTTY management..."
            $OPERATION = "{{ Operation }}"
            $installLocation = "{{ InstallLocation }}"

            # Check if running with administrative privileges
            $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
            $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
            Write-Log "Running with administrative privileges: $isAdmin"

            if (-not $isAdmin) {
                Write-Log "WARNING: Script is not running with administrative privileges. Shortcut creation may fail."
            }

            # Handle operation type
            if ($OPERATION -eq "uninstall") {
                Write-Log "Performing uninstall operation..."
                
                # Remove shortcuts
                $shortcutDir = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PuTTY"
                if (Test-Path $shortcutDir) {
                    try {
                        Remove-Item -Path $shortcutDir -Recurse -Force
                        Write-Log "Removed PuTTY shortcuts directory"
                    } catch {
                        Write-Log "Warning: Failed to remove shortcuts directory. Exception: $($_.Exception.Message)"
                    }
                }
                
                # Remove PuTTY installation directory
                if (Test-Path $installLocation) {
                    try {
                        Remove-Item -Path $installLocation -Recurse -Force
                        Write-Log "Removed PuTTY installation directory"
                    } catch {
                        Write-Log "Warning: Failed to remove installation directory. Exception: $($_.Exception.Message)"
                    }
                }
                
                # Remove from PATH
                $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
                if ($currentPath -like "*$installLocation*") {
                    try {
                        $newPath = $currentPath -replace [regex]::Escape(";$installLocation"), ""
                        $newPath = $newPath -replace [regex]::Escape("$installLocation;"), ""
                        $newPath = $newPath -replace [regex]::Escape("$installLocation"), ""
                        [Environment]::SetEnvironmentVariable("PATH", $newPath, "Machine")
                        Write-Log "Removed $installLocation from system PATH"
                    } catch {
                        Write-Log "Warning: Failed to update PATH. Exception: $($_.Exception.Message)"
                    }
                }
                
                Write-Log "PuTTY uninstallation completed"
                return
            }

            Write-Log "Performing install operation..."

            # Kill running PuTTY processes
            $toolsToKill = @("putty","puttygen","pscp","psftp")
            foreach ($tool in $toolsToKill) {
                $proc = Get-Process -Name $tool -ErrorAction SilentlyContinue
                if ($proc) { 
                    $proc | Stop-Process -Force -ErrorAction SilentlyContinue
                    Write-Log "Stopped running process: $tool"
                }
            }

            # Create install directory if missing
            if (!(Test-Path $installLocation)) {
                try {
                    New-Item -ItemType Directory -Path $installLocation -Force | Out-Null
                    Write-Log "Created installation directory: $installLocation"
                } catch {
                    Exit-WithError ("Failed to create installation directory. Exception: " + $_.Exception.Message)
                }
            }

            # Base URL
            $baseUrl = "https://the.earth.li/~sgtatham/putty/latest"

            # Map tool names to descriptions
            $puttyTools = @{}
            if ("{{ InstallPutty }}" -eq "true") { $puttyTools["putty.exe"] = "PuTTY SSH Client" }
            if ("{{ InstallPuttygen }}" -eq "true") { $puttyTools["puttygen.exe"] = "PuTTY Key Generator" }
            if ("{{ InstallPscp }}" -eq "true") { $puttyTools["pscp.exe"] = "PuTTY Secure Copy Client" }
            if ("{{ InstallPsftp }}" -eq "true") { $puttyTools["psftp.exe"] = "PuTTY SFTP Client" }

            # Determine system architecture
            $arch = if ((Get-CimInstance Win32_OperatingSystem).OSArchitecture -like "*32*") { "w32" } else { "w64" }

            # Install each tool
            foreach ($tool in $puttyTools.Keys) {
                $description = $puttyTools[$tool]
                $destinationPath = Join-Path $installLocation $tool

                if (!(Test-Path $destinationPath)) {
                    Write-Log "Downloading $description..."
                    $tempPath = Join-Path $env:TEMP $tool
                    try {
                        Invoke-WebRequest -Uri "$baseUrl/$arch/$tool" -OutFile $tempPath -UseBasicParsing
                        Write-Log ("Downloaded " + $tool + " to " + $tempPath)
                        Unblock-File -Path $tempPath
                        Copy-Item -Path $tempPath -Destination $destinationPath -Force
                        Write-Log ("Copied " + $tool + " to " + $destinationPath)
                        Remove-Item -Path $tempPath -Force -ErrorAction SilentlyContinue
                    } catch {
                        Write-Log ("Warning: Failed to download or copy " + $tool + ". Exception: " + $_.Exception.Message)
                    }
                } else {
                    Write-Log ($tool + " already exists. Skipping download.")
                }

                # Ensure proper file permissions and unblock the file
                if (Test-Path $destinationPath) {
                    try {
                        # First, unblock the file to remove Windows security restrictions
                        Unblock-File -Path $destinationPath -ErrorAction SilentlyContinue
                        Write-Log "Unblocked file: $destinationPath"
                        
                        # Verify the file is actually unblocked
                        $isStillBlocked = try { Get-Item $destinationPath -Stream Zone.Identifier -ErrorAction Stop; $true } catch { $false }
                        if ($isStillBlocked) {
                            Write-Log "WARNING: File is still blocked after unblock attempt: $destinationPath"
                            # Try alternative unblocking method
                            try {
                                Remove-Item "$destinationPath`:Zone.Identifier" -Force -ErrorAction Stop
                                Write-Log "Alternative unblock method applied for: $destinationPath"
                            } catch {
                                Write-Log "Alternative unblock failed for: $destinationPath"
                            }
                        } else {
                            Write-Log "File successfully unblocked: $destinationPath"
                        }
                        
                        # Get and display file information
                        $fileInfo = Get-Item $destinationPath
                        Write-Log "File info - Size: $($fileInfo.Length) bytes, Created: $($fileInfo.CreationTime)"
                        
                        # Set explicit permissions for Everyone to have full control
                        $acl = Get-Acl $destinationPath
                        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("Everyone", "FullControl", "Allow")
                        $acl.SetAccessRule($accessRule)
                        Set-Acl -Path $destinationPath -AclObject $acl
                        Write-Log "Set full permissions for Everyone on: $destinationPath"
                        
                    } catch {
                        Write-Log "Warning: Failed to set permissions for $destinationPath. Exception: $($_.Exception.Message)"
                    }
                }

                # Create Start Menu shortcut with proper name
                try {
                    $shortcutDir = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PuTTY"
                    if (!(Test-Path $shortcutDir)) { 
                        New-Item -ItemType Directory -Path $shortcutDir -Force | Out-Null 
                        Write-Log "Created shortcut directory: $shortcutDir"
                    }
                    
                    # Remove old shortcuts with .exe.lnk naming convention
                    $oldShortcutPath = Join-Path $shortcutDir "$tool.lnk"
                    if (Test-Path $oldShortcutPath) {
                        Remove-Item -Path $oldShortcutPath -Force
                        Write-Log "Removed old shortcut: $oldShortcutPath"
                    }
                    
                    # Verify target file exists and is accessible
                    if (!(Test-Path $destinationPath)) {
                        Write-Log "ERROR: Target file does not exist: $destinationPath"
                        continue
                    }
                    
                    # Check file permissions and properties
                    try {
                        $fileInfo = Get-Item $destinationPath
                        Write-Log "Target file verified: $destinationPath (Size: $($fileInfo.Length) bytes)"
                        
                        # Check if file is blocked (safer than running it)
                        $isBlocked = try { Get-Item $destinationPath -Stream Zone.Identifier -ErrorAction Stop; $true } catch { $false }
                        if ($isBlocked) {
                            Write-Log "WARNING: File is blocked by Windows security: $tool"
                        } else {
                            Write-Log "File security check passed for $tool"
                        }
                    } catch {
                        Write-Log "WARNING: File verification failed for $tool. Exception: $($_.Exception.Message)"
                    }
                    
                    # Create proper shortcut names
                    $shortcutName = switch ($tool) {
                        "putty.exe" { "PuTTY" }
                        "puttygen.exe" { "PuTTYgen" }
                        "pscp.exe" { "PSCP" }
                        "psftp.exe" { "PSFTP" }
                        default { $tool -replace "\.exe$", "" }
                    }
                    
                    $shortcutPath = Join-Path $shortcutDir "$shortcutName.lnk"
                    
                    # Ensure we use absolute paths
                    $absoluteTargetPath = [System.IO.Path]::GetFullPath($destinationPath)
                    $absoluteWorkingDir = [System.IO.Path]::GetFullPath($installLocation)
                    
                    Write-Log "Creating shortcut with target: $absoluteTargetPath"
                    Write-Log "Working directory: $absoluteWorkingDir"
                    
                    $WshShell = New-Object -ComObject WScript.Shell
                    $Shortcut = $WshShell.CreateShortcut($shortcutPath)
                    $Shortcut.TargetPath = $absoluteTargetPath
                    $Shortcut.WorkingDirectory = $absoluteWorkingDir
                    $Shortcut.Description = $description
                    $Shortcut.Arguments = ""
                    $Shortcut.Save()
                    Write-Log "Created Start Menu shortcut: $shortcutPath"
                    
                    # Verify shortcut was created and test its properties
                    if (Test-Path $shortcutPath) {
                        $shortcutInfo = Get-Item $shortcutPath
                        Write-Log "Shortcut verified: $($shortcutInfo.Name) (Size: $($shortcutInfo.Length) bytes)"
                        
                        # Test the shortcut by reading it back
                        try {
                            $testShortcut = $WshShell.CreateShortcut($shortcutPath)
                            Write-Log "Shortcut target path: $($testShortcut.TargetPath)"
                            Write-Log "Target exists: $(Test-Path $testShortcut.TargetPath)"
                            
                            # Verify target file is accessible
                            if (Test-Path $testShortcut.TargetPath) {
                                $targetFile = Get-Item $testShortcut.TargetPath
                                Write-Log "Target file accessible: $($targetFile.FullName) ($($targetFile.Length) bytes)"
                                
                                # Test if file can be executed (quick test with invalid argument to avoid hanging)
                                try {
                                    $testProcess = Start-Process -FilePath $testShortcut.TargetPath -ArgumentList "--invalid-test-arg" -PassThru -WindowStyle Hidden -ErrorAction Stop
                                    Start-Sleep -Milliseconds 500
                                    if (!$testProcess.HasExited) {
                                        $testProcess.Kill()
                                    }
                                    Write-Log "File execution test PASSED for: $tool"
                                } catch {
                                    Write-Log "File execution test FAILED for: $tool. Error: $($_.Exception.Message)"
                                    
                                    # Try to fix permissions if execution failed
                                    try {
                                        $acl = Get-Acl $testShortcut.TargetPath
                                        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("Users", "FullControl", "Allow")
                                        $acl.SetAccessRule($accessRule)
                                        Set-Acl -Path $testShortcut.TargetPath -AclObject $acl
                                        Write-Log "Applied Users FullControl permissions to: $($testShortcut.TargetPath)"
                                    } catch {
                                        Write-Log "Failed to set Users permissions: $($_.Exception.Message)"
                                    }
                                }
                            } else {
                                Write-Log "ERROR: Shortcut target does not exist: $($testShortcut.TargetPath)"
                            }
                        } catch {
                            Write-Log "ERROR: Failed to validate shortcut: $($_.Exception.Message)"
                        }
                    } else {
                        Write-Log "ERROR: Shortcut was not created: $shortcutPath"
                    }
                    
                    # Release COM object
                    try {
                        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($WshShell) | Out-Null
                    } catch {
                        Write-Log "Warning: Failed to release COM object"
                    }
                } catch {
                    Write-Log "Warning: Failed to create shortcut for $tool. Exception: $($_.Exception.Message)"
                }
            }

            # Add install dir to PATH if missing
            $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
            if ($currentPath -notlike "*$installLocation*") {
                try {
                    $newPath = "$currentPath;$installLocation"
                    [Environment]::SetEnvironmentVariable("PATH", $newPath, "Machine")
                    $env:PATH = "$env:PATH;$installLocation"
                    Write-Log "Added " + $installLocation + " to system PATH"
                } catch {
                    Write-Log ("Warning: Failed to update PATH. Exception: " + $_.Exception.Message)
                }
            }

            Write-Log "PuTTY installation completed successfully"

            # Verify shortcuts were created (simplified to avoid hanging)
            $shortcutDir = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PuTTY"
            if (Test-Path $shortcutDir) {
                $shortcuts = Get-ChildItem -Path $shortcutDir -Filter "*.lnk" -ErrorAction SilentlyContinue
                if ($shortcuts) {
                    Write-Log "Created shortcuts:"
                    foreach ($shortcut in $shortcuts) {
                        Write-Log "  - $($shortcut.Name)"
                    }
                } else {
                    Write-Log "WARNING: No shortcuts found in $shortcutDir"
                }
            } else {
                Write-Log "WARNING: Shortcut directory not found: $shortcutDir"
            }

            # Verify PuTTY installation directory
            Write-Log "Installation directory contents:"
            if (Test-Path $installLocation) {
                $installedFiles = Get-ChildItem -Path $installLocation -Filter "*.exe" -ErrorAction SilentlyContinue
                foreach ($file in $installedFiles) {
                    try {
                        $isBlocked = Get-Item $file.FullName -Stream Zone.Identifier -ErrorAction Stop
                        $blockedStatus = "(BLOCKED)"
                    } catch {
                        $blockedStatus = "(OK)"
                    }
                    Write-Log "  - $($file.Name) $blockedStatus"
                }
            }            Write-Log "You can now open PuTTY from Start Menu or by running putty.exe directly"
