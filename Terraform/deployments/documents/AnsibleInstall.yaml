schemaVersion: '2.2'
description: "Document to install and configure Ansible Tower on Linux servers using AWS Systems Manager (SSM)."
parameters:
  AnsibleTowerUsername:
    type: String
    description: "SSM Parameter Name for Ansible Tower admin username"
    default: "{{ssm:/Standard/ansible/username}}"
  AnsibleTowerPassword:
    type: String
    description: "SSM Parameter Name for Ansible Tower admin password"
    default: "{{ssm:/Standard/ansible/password}}"
  AnsibleTowerS3URI:
    type: String
    description: "S3 URI for Nessus agent on Ubuntu"
    default: s3://effulgencesoftwareinstall/Nessus/Linux/Ubuntu/Nessus-10.8.3-ubuntu1604_amd64.deb
  AnsibleS3BucketName:
    type: String
    description: "S3 Bucket Name for Ansible Tower installer"
    default: s3://effulgencesoftwareinstall/Nessus/Windows/Nessus-10.8.3-x64.msi


mainSteps:
  - action: aws:runShellScript
    name: InstallAnd ConfigureAnsibleTower
    description: |
      Installs Nessus agent on Linux servers
    inputs:
      runCommand:
        - |
            #!/bin/bash -xe
            ##############################################################
                  #  INSTALLING AND CONFIGURING ANSIBLE TOWER  #
            ##############################################################              
              # Variables - Using SSM Parameters from document parameters (auto-resolved by SSM)
              REDHAT_USERNAME="{{ AnsibleTowerUsername }}" # Auto-resolved by SSM
              REGISTER_PASSWORD="{{ AnsibleTowerPassword }}" # Auto-resolved by SSM
              S3_BUCKET="mustydain"
              TOWER_ARCHIVE="ansible-automation-platform-setup-bundle-2.4-1-x86_64.tar.gz"
              TOWER_FOLDER="/root/ansible-automation-platform-setup-bundle-2.4-1-x86_64"
              INVENTORY_FILE="$TOWER_FOLDER/inventory"
              INSTALLER_SOURCE="s3://mustydain/ansible-automation-platform-setup-bundle-2.4-1-x86_64.tar.gz"  # S3 Path Variable

              # Ensure AWS CLI is in the PATH
              export PATH=/usr/local/bin:$PATH              
              # Install AWS CLI if not installed
              if ! command -v aws &> /dev/null; then
                echo "Installing AWS CLI..."
                sudo yum install unzip -y
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                sudo rm -rf aws
                unzip -o awscliv2.zip
                sudo ./aws/install
                /usr/local/bin/aws --version  # Directly added here to verify installation
                export PATH=/usr/local/bin:$PATH
                if ! command -v aws &> /dev/null; then
                  echo "Error: AWS CLI installation failed!"
                  exit 1
                fi
              else
                echo "AWS CLI already installed. Skipping..."
              fi
              
              # Register with Red Hat Subscription Manager
              if sudo subscription-manager register --username "$REDHAT_USERNAME" --password "$REGISTER_PASSWORD"; then
                echo "Red Hat registration successful."
              else
                echo "Instance already registered or failed to register."
              fi
              
              # Update system packages
              echo "Updating system packages..."
              sudo yum update -y
              
              # Set hostname
              echo "Setting hostname..."
              sudo hostnamectl set-hostname ansible
              echo "127.0.0.1 ansible.local localhost.localdomain" | sudo tee -a /etc/hosts
              
              # **Download Ansible Tower installer from S3 (Using Variable for Source)**
              echo "Downloading Ansible Tower installer from S3..."
              aws s3 cp "$INSTALLER_SOURCE" /root/
              if [ ! -f "/root/$TOWER_ARCHIVE" ]; then
                echo "Error: Failed to download Ansible Tower archive from S3!"
                exit 1
              fi
              
              # Extract Ansible Tower installer
              echo "Extracting Ansible Tower archive..."
              tar -xzf "/root/$TOWER_ARCHIVE" -C /root/
              
              # Modify inventory file (using auto-resolved SSM values)
              if [ -f "$INVENTORY_FILE" ]; then
                echo "Configuring inventory file..."
                sudo sed -i "s|admin_password=.*|admin_password='$REGISTER_PASSWORD'|" "$INVENTORY_FILE"
                sudo sed -i "s|pg_password=.*|pg_password='$REGISTER_PASSWORD'|" "$INVENTORY_FILE"
                sudo sed -i "s|register_username=.*|register_username='$REDHAT_USERNAME'|" "$INVENTORY_FILE"
                sudo sed -i "s|register_password=.*|register_password='$REGISTER_PASSWORD'|" "$INVENTORY_FILE"
              
                echo "[automationcontroller]" | sudo tee -a "$INVENTORY_FILE"
                echo "ansible ansible_connection=local" | sudo tee -a "$INVENTORY_FILE"
              else
                echo "Error: Inventory file not found!"
                exit 1
              fi
              
              # Run Ansible Tower setup
              echo "Starting Ansible Tower setup..."
              if [ -f "$TOWER_FOLDER/setup.sh" ]; then
                sudo bash "$TOWER_FOLDER/setup.sh" -e required_ram=2048
              else
                echo "Error: Ansible Tower setup script not found!"
                exit 1
              fi
              
              echo "Ansible Tower setup completed successfully!"
                  precondition:
                    StringEquals:
                      - platformType
                      - Linux
