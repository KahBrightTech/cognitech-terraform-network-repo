---
schemaVersion: '2.2'
description: Install IIS with SSL certificate and Google Chrome on Windows Server
parameters:
  certificateSubject:
    type: String
    description: Subject name for the self-signed certificate
    default: "CN={{local-hostname}}"
  siteName:
    type: String
    description: IIS site name
    default: "Default Web Site"
mainSteps:
  - action: aws:runPowerShellScript
    name: InstallIIS
    description: Install IIS with required features
    inputs:
      runCommand:
        - |
          Write-Output "Starting IIS installation..."
          
          # Install IIS with common features
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFx45 -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionDynamic -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-IPSecurity -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-URLAuthorization -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45 -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45 -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter -All
          Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole -All
          
          Write-Output "IIS installation completed."

  - action: aws:runPowerShellScript
    name: CreateSelfSignedCertificate
    description: Create and configure self-signed SSL certificate
    inputs:
      runCommand:
        - |
          Write-Output "Creating self-signed certificate..."
          
          # Import WebAdministration module
          Import-Module WebAdministration
          
          # Get the computer name for certificate subject
          $computerName = $env:COMPUTERNAME
          $certSubject = "{{certificateSubject}}".Replace("{{local-hostname}}", $computerName)
          
          # Create self-signed certificate
          $cert = New-SelfSignedCertificate -DnsName $computerName -CertStoreLocation "cert:\LocalMachine\My" -Subject $certSubject -KeyUsage DigitalSignature,KeyEncipherment -KeyAlgorithm RSA -KeyLength 2048 -NotAfter (Get-Date).AddYears(2)
          
          # Export certificate to Trusted Root Certification Authorities
          $certPath = "cert:\LocalMachine\My\$($cert.Thumbprint)"
          Export-Certificate -Cert $certPath -FilePath "C:\temp_cert.cer"
          Import-Certificate -FilePath "C:\temp_cert.cer" -CertStoreLocation "cert:\LocalMachine\Root"
          Remove-Item "C:\temp_cert.cer" -Force
          
          Write-Output "Certificate created with thumbprint: $($cert.Thumbprint)"
          Write-Output "Certificate subject: $certSubject"
          
          # Store thumbprint for next step
          $cert.Thumbprint | Out-File -FilePath "C:\cert_thumbprint.txt" -Encoding UTF8
          
          Write-Output "Self-signed certificate creation completed."

  - action: aws:runPowerShellScript
    name: ConfigureIISSSL
    description: Configure IIS with SSL binding
    inputs:
      runCommand:
        - |
          Write-Output "Configuring IIS SSL binding..."
          
          # Import WebAdministration module
          Import-Module WebAdministration
          
          # Read certificate thumbprint
          $thumbprint = Get-Content "C:\cert_thumbprint.txt" -Raw
          $thumbprint = $thumbprint.Trim()
          
          $siteName = "{{siteName}}"
          
          # Remove existing HTTPS binding if it exists
          try {
              Get-WebBinding -Name $siteName -Protocol "https" -Port 443 | Remove-WebBinding
              Write-Output "Removed existing HTTPS binding."
          } catch {
              Write-Output "No existing HTTPS binding found."
          }
          
          # Add HTTPS binding with the certificate
          New-WebBinding -Name $siteName -IP "*" -Port 443 -Protocol "https"
          
          # Bind the certificate to the HTTPS binding
          $binding = Get-WebBinding -Name $siteName -Protocol "https" -Port 443
          $binding.AddSslCertificate($thumbprint, "my")
          
          # Clean up temporary file
          Remove-Item "C:\cert_thumbprint.txt" -Force
          
          # Start the website if it's not running
          Start-Website -Name $siteName
          
          Write-Output "SSL binding configured successfully for site: $siteName"
          Write-Output "HTTPS is now available on port 443"

  - action: aws:runPowerShellScript
    name: InstallGoogleChrome
    description: Download and install Google Chrome
    inputs:
      runCommand:
        - |
          Write-Output "Starting Google Chrome installation..."
          
          # Create temp directory
          $tempDir = "C:\temp"
          if (!(Test-Path $tempDir)) {
              New-Item -ItemType Directory -Path $tempDir -Force
          }
          
          # Download Google Chrome installer
          $chromeUrl = "https://dl.google.com/chrome/install/ChromeStandaloneSetup64.exe"
          $chromeInstaller = "$tempDir\ChromeStandaloneSetup64.exe"
          
          try {
              Write-Output "Downloading Google Chrome..."
              Invoke-WebRequest -Uri $chromeUrl -OutFile $chromeInstaller -UseBasicParsing
              
              # Verify download was successful
              if (!(Test-Path $chromeInstaller)) {
                  throw "Chrome installer download failed"
              }
              
              Write-Output "Download completed. File size: $((Get-Item $chromeInstaller).Length) bytes"
              
              # Install Chrome silently with correct arguments
              Write-Output "Installing Google Chrome..."
              $installProcess = Start-Process -FilePath $chromeInstaller -ArgumentList "/silent" -Wait -PassThru
              
              # Check installation exit code
              if ($installProcess.ExitCode -eq 0) {
                  Write-Output "Chrome installer completed with exit code: $($installProcess.ExitCode)"
              } else {
                  Write-Output "Chrome installer completed with exit code: $($installProcess.ExitCode)"
                  Write-Output "Note: Exit code may not indicate failure for Chrome installer"
              }
              
              # Wait a moment for installation to complete
              Start-Sleep -Seconds 10
              
              # Verify installation by checking for Chrome executable
              $chromeExe = "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe"
              $chromeExe86 = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
              
              if ((Test-Path $chromeExe) -or (Test-Path $chromeExe86)) {
                  Write-Output "Google Chrome installation verified successfully."
                  if (Test-Path $chromeExe) {
                      Write-Output "Chrome installed at: $chromeExe"
                  } else {
                      Write-Output "Chrome installed at: $chromeExe86"
                  }
              } else {
                  Write-Output "Chrome installation could not be verified - executable not found"
                  # Additional verification using registry
                  $chromeInstalled = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.DisplayName -like "*Google Chrome*" }
                  if ($chromeInstalled) {
                      Write-Output "Chrome found in registry: $($chromeInstalled.DisplayName) $($chromeInstalled.DisplayVersion)"
                  }
              }
              
              # Clean up installer
              Remove-Item $chromeInstaller -Force
              
          } catch {
              Write-Output "Error downloading or installing Google Chrome: $($_.Exception.Message)"
              Write-Output "Attempting alternative installation method..."
              
              # Alternative method - try using msiexec if the installer is MSI-based
              try {
                  # Check if Chrome is already installed
                  $chromeInstalled = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.DisplayName -like "*Google Chrome*" }
                  if ($chromeInstalled) {
                      Write-Output "Google Chrome appears to be already installed: $($chromeInstalled.DisplayName)"
                  } else {
                      Write-Output "Trying alternative Chrome installation URL..."
                      $altChromeUrl = "https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi"
                      $altChromeInstaller = "$tempDir\ChromeStandaloneEnterprise64.msi"
                      
                      Invoke-WebRequest -Uri $altChromeUrl -OutFile $altChromeInstaller -UseBasicParsing
                      
                      if (Test-Path $altChromeInstaller) {
                          Write-Output "Attempting MSI installation..."
                          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $altChromeInstaller, "/quiet", "/norestart" -Wait
                          Start-Sleep -Seconds 10
                          Remove-Item $altChromeInstaller -Force
                          
                          # Verify alternative installation
                          $chromeExe = "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe"
                          if (Test-Path $chromeExe) {
                              Write-Output "Chrome successfully installed via MSI method"
                          } else {
                              Write-Output "Alternative installation method also failed"
                          }
                      }
                  }
              } catch {
                  Write-Output "Alternative Chrome installation failed: $($_.Exception.Message)"
              }
          }

  - action: aws:runPowerShellScript
    name: VerifyInstallation
    description: Verify all installations and configurations
    inputs:
      runCommand:
        - |
          Write-Output "Verifying installations..."
          
          # Check IIS status
          $iisStatus = Get-Service -Name "W3SVC" -ErrorAction SilentlyContinue
          if ($iisStatus -and $iisStatus.Status -eq "Running") {
              Write-Output "✓ IIS is installed and running"
          } else {
              Write-Output "✗ IIS is not running properly"
          }
          
          # Check SSL binding
          Import-Module WebAdministration
          $sslBinding = Get-WebBinding -Name "{{siteName}}" -Protocol "https" -Port 443 -ErrorAction SilentlyContinue
          if ($sslBinding) {
              Write-Output "✓ SSL binding configured on port 443"
          } else {
              Write-Output "✗ SSL binding not found"
          }
          
          # Check certificate
          $certs = Get-ChildItem -Path "cert:\LocalMachine\My" | Where-Object { $_.Subject -like "*$($env:COMPUTERNAME)*" }
          if ($certs) {
              Write-Output "✓ Self-signed certificate found: $($certs[0].Subject)"
              Write-Output "  Thumbprint: $($certs[0].Thumbprint)"
              Write-Output "  Expires: $($certs[0].NotAfter)"
          } else {
              Write-Output "✗ Self-signed certificate not found"
          }
          
          # Check Chrome installation
          $chromeExe = "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe"
          $chromeExe86 = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
          $chromeInstalled = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.DisplayName -like "*Google Chrome*" }
          
          if ((Test-Path $chromeExe) -or (Test-Path $chromeExe86)) {
              if (Test-Path $chromeExe) {
                  $chromeVersion = (Get-Item $chromeExe).VersionInfo.ProductVersion
                  Write-Output "✓ Google Chrome is installed: Version $chromeVersion"
                  Write-Output "  Location: $chromeExe"
              } else {
                  $chromeVersion = (Get-Item $chromeExe86).VersionInfo.ProductVersion
                  Write-Output "✓ Google Chrome is installed: Version $chromeVersion"
                  Write-Output "  Location: $chromeExe86"
              }
          } elseif ($chromeInstalled) {
              Write-Output "✓ Google Chrome found in registry: $($chromeInstalled.DisplayName) $($chromeInstalled.DisplayVersion)"
              Write-Output "  Warning: Chrome executable not found in expected location"
          } else {
              Write-Output "✗ Google Chrome installation not verified"
              Write-Output "  Expected locations:"
              Write-Output "    $chromeExe"
              Write-Output "    $chromeExe86"
          }
          
          Write-Output "Installation verification completed."
          Write-Output ""
          Write-Output "Next steps:"
          Write-Output "1. Access your website via HTTPS://$($env:COMPUTERNAME) or HTTPS://localhost"
          Write-Output "2. You may see a certificate warning in browsers - this is normal for self-signed certificates"
          Write-Output "3. Chrome is available in the Start Menu or desktop"
