schemaVersion: '2.2'
description: "Document to install and configure Ansible Tower on Linux servers using AWS Systems Manager (SSM) - Manual Parameter Resolution (WORKING VERSION)"
parameters:
  AnsibleS3BucketName:
    type: String
    description: "S3 Bucket Name for Ansible Tower installer"
    default: "ansibleautomationbucket"
  AnsibleS3BucketPrefix:
    type: String
    description: "S3 Bucket Prefix for Ansible Tower installer"
    default: "Ansible_Tower"
  AnsibleTowerArchiveName:
    type: String
    description: "Ansible Tower archive filename"
    default: "ansible-automation-platform-setup-bundle-2.4-1-x86_64.tar.gz"

mainSteps:
  - action: aws:runShellScript
    name: InstallAndConfigureAnsibleTower
    description: Installs and configures Ansible Tower on Linux servers
    inputs:
      timeoutSeconds: 7200
      runCommand:
        - |
          #!/bin/bash -xe
          
          # Logging and error handling functions
          log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }

          error_exit() {
              log "ERROR: $1"
              exit 1
          }

          log "Starting Ansible Tower installation with manual SSM parameter resolution..."

          # Manual SSM parameter resolution (proven to work from your test)
          log "Resolving SSM parameters..."
          
          ANSIBLE_TOWER_USERNAME=$(aws ssm get-parameter --name "/Standard/ansible/username" --query "Parameter.Value" --output text 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$ANSIBLE_TOWER_USERNAME" ]; then
              error_exit "Failed to retrieve username from SSM parameter /Standard/ansible/username"
          fi
          
          ANSIBLE_TOWER_PASSWORD=$(aws ssm get-parameter --name "/Standard/ansible/password" --with-decryption --query "Parameter.Value" --output text 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$ANSIBLE_TOWER_PASSWORD" ]; then
              error_exit "Failed to retrieve password from SSM parameter /Standard/ansible/password"
          fi
          
          # Set other variables from document parameters
          ANSIBLE_S3_BUCKET_NAME="{{ AnsibleS3BucketName }}"
          ANSIBLE_S3_BUCKET_PREFIX="{{ AnsibleS3BucketPrefix }}"
          ANSIBLE_TOWER_ARCHIVE_NAME="{{ AnsibleTowerArchiveName }}"
          
          log "SSM parameters resolved successfully"
          log "Configuration:"
          log "  Username: $ANSIBLE_TOWER_USERNAME"
          log "  Password: [REDACTED - ${#ANSIBLE_TOWER_PASSWORD} characters]"
          log "  S3 Bucket: $ANSIBLE_S3_BUCKET_NAME"
          log "  S3 Prefix: $ANSIBLE_S3_BUCKET_PREFIX"
          log "  Archive Name: $ANSIBLE_TOWER_ARCHIVE_NAME"
          log "  Full S3 URI: s3://$ANSIBLE_S3_BUCKET_NAME/$ANSIBLE_S3_BUCKET_PREFIX/$ANSIBLE_TOWER_ARCHIVE_NAME"

          export PATH=/usr/local/bin:$PATH

          # AWS CLI check and installation
          if ! command -v aws &> /dev/null; then
            log "Installing AWS CLI..."
            yum install unzip -y || error_exit "Failed to install unzip"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || error_exit "Failed to download AWS CLI"
            rm -rf aws
            unzip -o awscliv2.zip || error_exit "Failed to extract AWS CLI"
            ./aws/install || error_exit "Failed to install AWS CLI"
            /usr/local/bin/aws --version || error_exit "AWS CLI installation verification failed"
            export PATH=/usr/local/bin:$PATH
            if ! command -v aws &> /dev/null; then
              error_exit "AWS CLI installation failed - command not found in PATH"
            fi
            log "AWS CLI installed successfully"
          else
            log "AWS CLI already installed. Version: $(aws --version)"
          fi

          # AWS credentials check
          if ! aws sts get-caller-identity &> /dev/null; then
            error_exit "AWS credentials not configured properly. Ensure the EC2 instance has an IAM role with proper permissions"
          fi
          log "AWS credentials verified"

          # Validate S3 file exists before proceeding
          log "Validating S3 file exists..."
          S3_URI="s3://$ANSIBLE_S3_BUCKET_NAME/$ANSIBLE_S3_BUCKET_PREFIX/$ANSIBLE_TOWER_ARCHIVE_NAME"
          if ! aws s3 ls "$S3_URI" &> /dev/null; then
            log "ERROR: File does not exist at $S3_URI"
            log "Available files in s3://$ANSIBLE_S3_BUCKET_NAME/$ANSIBLE_S3_BUCKET_PREFIX/:"
            aws s3 ls "s3://$ANSIBLE_S3_BUCKET_NAME/$ANSIBLE_S3_BUCKET_PREFIX/" || log "Failed to list bucket contents"
            error_exit "Ansible Tower archive not found in S3"
          fi
          log "S3 file validation successful"

          # Red Hat Subscription Manager registration
          log "Attempting to register with Red Hat Subscription Manager..."
          if subscription-manager register --username "$ANSIBLE_TOWER_USERNAME" --password "$ANSIBLE_TOWER_PASSWORD"; then
            log "Red Hat registration successful."
          else
            log "Instance already registered or failed to register. Continuing..."
          fi

          # System update
          log "Updating system packages..."
          yum update -y || error_exit "Failed to update system packages"

          # Set hostname
          log "Setting hostname..."
          hostnamectl set-hostname ansible || error_exit "Failed to set hostname"
          echo "127.0.0.1 ansible.local localhost.localdomain" >> /etc/hosts

          # Download Ansible Tower installer
          log "Downloading Ansible Tower installer from S3..."
          log "Source: $S3_URI"
          log "Destination: /root/$ANSIBLE_TOWER_ARCHIVE_NAME"

          mkdir -p /root
          if aws s3 cp "$S3_URI" "/root/" --no-progress; then
            log "Download completed successfully"
          else
            error_exit "Failed to download Ansible Tower archive from S3"
          fi

          # Verify download
          if [ ! -f "/root/$ANSIBLE_TOWER_ARCHIVE_NAME" ]; then
            error_exit "Ansible Tower archive not found after download"
          fi

          FILE_SIZE=$(stat -c%s "/root/$ANSIBLE_TOWER_ARCHIVE_NAME" 2>/dev/null || echo "unknown")
          log "Downloaded file size: $FILE_SIZE bytes"

          # Extract archive
          log "Extracting Ansible Tower archive..."
          if tar -xzf "/root/$ANSIBLE_TOWER_ARCHIVE_NAME" -C /root/; then
            log "Archive extracted successfully"
          else
            error_exit "Failed to extract Ansible Tower archive"
          fi

          # Find extracted folder
          log "Looking for extracted Ansible folder..."
          EXTRACTED_FOLDER=$(find /root -maxdepth 1 -type d -name "*ansible*" | grep -v "^/root$" | head -1)

          if [ -z "$EXTRACTED_FOLDER" ]; then
            log "Available directories in /root:"
            ls -la /root/
            error_exit "Could not find extracted Ansible Tower folder!"
          fi

          log "Found extracted folder: $EXTRACTED_FOLDER"

          # Verify inventory file
          if [ ! -f "$EXTRACTED_FOLDER/inventory" ]; then
            log "Contents of $EXTRACTED_FOLDER:"
            ls -la "$EXTRACTED_FOLDER/"
            error_exit "Inventory file not found!"
          fi

          # Configure inventory
          cp "$EXTRACTED_FOLDER/inventory" "$EXTRACTED_FOLDER/inventory.backup"
          log "Created backup of inventory file"

          log "Configuring inventory file..."
          sed -i "s|admin_password=.*|admin_password='$ANSIBLE_TOWER_PASSWORD'|" "$EXTRACTED_FOLDER/inventory"
          sed -i "s|pg_password=.*|pg_password='$ANSIBLE_TOWER_PASSWORD'|" "$EXTRACTED_FOLDER/inventory"
          sed -i "s|register_username=.*|register_username='$ANSIBLE_TOWER_USERNAME'|" "$EXTRACTED_FOLDER/inventory"
          sed -i "s|register_password=.*|register_password='$ANSIBLE_TOWER_PASSWORD'|" "$EXTRACTED_FOLDER/inventory"

          echo "" >> "$EXTRACTED_FOLDER/inventory"
          echo "[automationcontroller]" >> "$EXTRACTED_FOLDER/inventory"
          echo "ansible ansible_connection=local" >> "$EXTRACTED_FOLDER/inventory"

          log "Inventory configuration completed"

          # Verify setup script
          if [ ! -f "$EXTRACTED_FOLDER/setup.sh" ]; then
            log "Contents of $EXTRACTED_FOLDER:"
            ls -la "$EXTRACTED_FOLDER/"
            error_exit "Ansible Tower setup script not found!"
          fi

          # Run setup
          chmod +x "$EXTRACTED_FOLDER/setup.sh"
          log "Starting Ansible Tower setup..."
          cd "$EXTRACTED_FOLDER" || error_exit "Failed to change to extracted folder"

          if bash setup.sh -e required_ram=2048; then
            log "Ansible Tower setup completed successfully!"
          else
            error_exit "Ansible Tower setup failed!"
          fi

          log "Installation script completed!"
          log "You can now access Ansible Tower at: https://$(hostname)/api/"
          log "Username: admin"
          log "Password: [REDACTED]"
    precondition:
      StringEquals:
        - platformType
        - Linux
